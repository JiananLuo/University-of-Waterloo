#include <iostream>
#include "q2printer.h"
#include "q2player.h"
#include "PRNG.h"

using namespace std;

extern PRNG prng;

void Player::main() {
	suspend();
	for(;;) {
		// first drinker
		bool drinker = false;
		int deckLeft;
		try {
			_Enable {
				// check if only 1 player left, if so, win
				if(numOfPlayers == 1) {
					this->printer.prt(this->id, this->deck, numOfPlayers);
					return;
				}

				// take # of cards generated by prng
				int deckTake = prng(1, 8);

				// remove # of cards from deck
				deckLeft = this->deck - deckTake;

				// check if all remain cards got taken, if so adjust
				if(deckLeft <= 0) {
					deckLeft = 0;
					deckTake = this->deck;
				}

				// print
				this->printer.prt(this->id, deckTake, this->numOfPlayers);

				// if player took all remaining deck, win
				if(deckLeft == 0) {
					this->printer.prt(this->id, -1, numOfPlayers);
					return;
				}

				// if game not end
				if(deckLeft != 0) {
					if(this->deck % 7 == 0) {
						// check if the current die, if so, reassign lp & rp
						this->lp->rp = this->rp;
						this->rp->lp = this->lp;
						this->numOfPlayers--;
					} else {
						// else, check if need to drink
						if(prng(0, 9) == 0) {
							drinker = true;
							this->drink();
							_Resume Schmilblick() _At *rp;
							this->rp->play(deckLeft);
						}
					}

					// check even / odd to pass
					if(deckLeft % 2 == 0) {
						this->rp->play(deckLeft);
					} else {
						this->lp->play(deckLeft);
					}
					
				}
			}
		}
		_CatchResume (Player::Schmilblick) {
			_Enable {
				if(drinker) {
					// if returned to the first drink, reset flag
					drinker = false;
				} else {
					// else just drink, my friend, and pass
					this->drink();
					_Resume Schmilblick() _At *rp;
					this->rp->play(deckLeft);
				}
			}
		}
	}
}

// assign static numOfPlayers
void Player::players(unsigned int num) {
	numOfPlayers = num;
}

// constructor
Player::Player(Printer &printer, unsigned int id) : printer(printer), lp(NULL), rp(NULL) {
	this->id = id;
}

// init player, assign left player & right player
void Player::start(Player &lp, Player &rp) {
	this->lp = &lp;
	this->rp = &rp;
	resume();
}

// lets play, pass deck
void Player::play(unsigned int deck) {
	this->deck = deck;
	resume();
}

// player drink
void Player::drink() {
	this->printer.prt(this->id, -1, -1);
}
