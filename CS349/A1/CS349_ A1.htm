<!DOCTYPE html>
<!-- saved from url=(0066)https://www.student.cs.uwaterloo.ca/~cs349/w17/assignments/a1.html -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <title>
            CS349: A1
        </title>

        
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link rel="stylesheet" type="text/css" href="./CS349_ A1_files/reset.css">
        <link rel="stylesheet" type="text/css" href="./CS349_ A1_files/layout.css">
        <link rel="stylesheet" type="text/css" href="./CS349_ A1_files/text.css">
        <link rel="stylesheet" type="text/css" href="./CS349_ A1_files/style.css">
        <script src="./CS349_ A1_files/jquery.js" type="text/javascript"></script>
        <script src="./CS349_ A1_files/course.js" type="text/javascript"></script>
        <script type="text/javascript">page = "a3"</script>
        <style>
        .fback {
            text-align: center;
        }
        </style>

    </head>

    <body>
        <div id="wrapper">
            <header id="header">
            </header>

            <div id="assign_info">
                <h3 style="margin-bottom: 0;">
                    <strong>Assignment 1:</strong> Drawing and Event-driven Programming with Xlib
                </h3>
                <h1 style="margin-top: 0;">
                    Snake
                </h1>
                <p class="notes">
                    <strong>Due Fri Jan 27 at 5:00 PM</strong><br>
                    <strong>This is a firm deadline, no extensions!</strong>
                    <br><br>
                    Starter code can be downloaded from <a href="https://www.student.cs.uwaterloo.ca/~cs349/w17/assignments/a1-skeleton-code.zip">here</a>.
                </p>
            </div>

        <div id="content">
            <h2>Synopsis</h2>
            <p>
                </p><p>You will implement Snake, a classic 2D video game where the objective is to control a line as it grows in length while preventing it from hitting the bounds or itself (<a href="https://en.wikipedia.org/wiki/Snake_(video_game)">Wikipedia</a>).</p>
                <p>Your program must be written in C++, using XLib. You may use any of the <a href="https://www.student.cs.uwaterloo.ca/~cs349/w17/code/x_examples.zip">sample code</a> provided in-class, or this <a href="https://www.student.cs.uwaterloo.ca/~cs349/w17/assignments/a1-skeleton-code.zip">A1 starter code</a>. You are not allowed to share assignment solutions, or use code from any source other than those specified.</p>
                <p class="fig">
                    <img src="./CS349_ A1_files/a1mockup.png" alt="missing" class="img-responsive" height="350">
                    <br>Snake game.
                </p>
            <p></p>

            <h2>Learning Goals</h2>
            <p>
            </p><ul>
                <li>Learn how to build an interactive game using C++, the X Window System and Xlib.</li>
                <li>Learn how to handle real-time 2D drawing and animation with primitive shapes.</li>
            </ul>

            <h2>Game Description</h2>
            <p>
            There are various versions of Snake playable on the web such as <a href="http://playsnake.org/">here</a> and <a href="http://patorjk.com/games/snake/">here</a>. The general rules of the game are:</p>
                <ul>
                    <li>The game screen displays a snake (chain of blocks) always in motion and a fruit (block) at a fixed point on the screen.</li>
                    <li>The direction of the snake can be controlled (by arrows keys) in that it can switch its direction by either turning left or right at a time.</li>
                    <li>The objective of the snake is to eat the target fruit, which makes it grow in length. Conventionally, there is always only one fruit on the screen.</li>
                    <li>As the snake eats the fruit, it disappears, and another one appears at a random location.</li>
                    <li>The snake can die by eating itself (when it collides with itself) or by hitting the edge of the screen or any other obstacles.</li>
                </ul>

            <h2>Requirements</h2>
            <ol>
                <li>Your program must consist of one or more source files, and a <code>Makefile</code> that builds and runs your program. (<code>make</code> should build it, and <code>make run</code> should run with default arguments).</li>
                <li>Implement Snake of your own design with C++ and Xlib, running on an XServer (Windows XMing, macOS XQuartz, or Linux). 
                    You should compile and test with g++ 4.9.4 or later (we will test on the student environment using that version). 
                    You are not allowed to use any other third-party libraries.</li>
                <li>The game should run in a window on the desktop. It should open with a splash screen that includes your name, userid, and a description of how to play the game (including a description of which keys to use).</li>
                <li>The game must accept two command-line parameters: (1) "frame-rate", which controls how often the screen is repainted, and (2) speed of the snake, describing how fast the snake moves in the game. E.g. <code>./snake 30 5</code> describes the framerate of 30 and speed of 5.</li>
                <li>The game must play smoothly with proper collision detection in the range of 25 to 60 FPS (while supporting a range of 1-100 FPS for testing).</li>
                <li>The game must use a range of 1-10 to specify the speed of the snake.</li>
                <li>The snake can move 1 pixel at a time, or one "block" at a time (where a block is a fixed number of pixels). Both styles of gameplay are acceptable, but the animation should be smooth in either case.</li>
                <li>The game must use the arrow keys (and/or WASD) to control the snake's movements. Specify in the README which controls to use.</li>
                <li>The game window should be fixed at 800x600 pixels and does not need to support resizing (i.e. it can be a fixed size).</li>
                <li>The game should keep track of a score that updates over the course of the game. It is up to you to decide how and when to update the score.</li>
                <li>The game should have the ability to play, pause, and restart the level.</li>
                <li>Include a <code>README.txt</code> with a description of the game, the controls, the enhancements, the development environment, and anything else that TAs should know when grading.</li>
            </ol>
            <h2>Enhancements (Max 10%, must choose from the list below)</h2>
            <ol>
                <li>Use texture graphics for the background, the snake, and other game objects. (10 marks)</li>
                <li>Power-ups (e.g. increase lives, invincibility, etc.) that either appear at a random point on the screen or "fall down" the screen. Be creative with this, an individual power-up is generally worth 5 marks, so implement at least two different power-ups for full marks. (5 marks per power up)</li>
                <li>Creative level design. A classic level is a bounded square region with no obstacles inside. You can enhance this by adding obstacles that the snake must avoid and gaps on the border that lets the snake wrap around to other side of the screen.(10 marks)</li>
                <li>Support for multiple levels: a level can be “beaten” and the game restarts with a new level, at a higher difficulty. The levels should each be different, and the game must increase in complexity and difficulty as the game progresses. (5 marks)</li>
                <li>Multi-player support. Allow two players to play the game simultaneously, each controlling their own snake using distinct controls. Gameplay and animation should remain smooth. (5 marks).
            </li></ol>

            <h2>Submission</h2>
            Submit your assignment to your personal repository, under <code>a1/</code> directory at <a href="https://git.uwaterloo.ca/">git.uwaterloo.ca</a>:
            <ul>
                <li>Ensure all files required to compile the program are checked in, including <code>Makefile</code>.</li>
                <li>System and build-generated files (e.g. <code>.DS_Store</code>, <code>.class</code>, <code>.o</code>) do not need to be checked in. These can specified in the <a href="https://git-scm.com/docs/gitignore">.gitignore</a> file.</li>
            </ul>
            <h2>Assessment</h2>
            <p>
                Late assignments will not be accepted. Markers will test your application by building and running your code from the Makefile. Your submission will be assessed as follows:
            </p>
            <dl class="assess">
                <dt>5%</dt><dd>Deliverables: Code compiles and runs.</dd>
                <dt>5%</dt><dd>Includes a <code>README.txt</code> describing the development environment, the overall design, and enhancements.</dd>
                <dt>40%</dt><dd>Technical requirements: event-handling, repainting, support for a reasonable framerate (25-60 FPS).</dd>
                <dt>40%</dt><dd>Gameplay requirements</dd>
                <dt>10%</dt><dd>Enhancements</dd>
            </dl>

            <h2>Versions</h2>
            <p>
                1.0. Initial release.<br>
                1.1. Added additional link to starter code at the top of the specification.<br>
                1.2. Added compiler details (g+ 4.9.4 or later).<br>
                1.3. Clarified that snake movement can be one "block" at a time. Added two-player support as an enhancement.<br>
            </p>

        </div>
    </div>
    <footer id="footer"></footer>
    

</body></html>